<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <!-- Repalce * to your package -->
    <context:component-scan base-package="project.*">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <task:annotation-driven executor="taskExecutor"/>
    <task:executor id="taskExecutor" pool-size="15-20" queue-capacity="1000"/>

    <!-- Data config holder -->
    <!--<bean id="propertyConfigurer"-->
    <!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"-->
    <!--p:location="/WEB-INF/properties/db.properties"/>-->

    <!-- Data config holder -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:spring/properties/db.properties</value>
                <value>classpath:spring/properties/gmail.properties</value>
                <value>classpath:spring/properties/mail-credential.properties</value>
                <value>classpath:spring/properties/mail-template.properties</value>
                <value>classpath:spring/properties/pattern.properties</value>
            </list>
        </property>
    </bean>

    <!-- Jpa Vendor -->
    <bean id="jpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
    </bean>

    <!-- inject @PersistentContext -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- inject @Repository -->
    <!-- 	<jpa:repositories base-package="ua.repository" factory-class="ua.repository.LocalizedSimpleJpaRepositoryFactoryBean"/> -->
    <jpa:repositories base-package="project.repository"/>

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
          p:driverClass="${db.driverClassName}" p:jdbcUrl="${db.databaseurl}"
          p:user="${db.userName}" p:password="${db.password}" p:minPoolSize="5"
          p:maxPoolSize="10" p:maxIdleTime="200">
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="packagesToScan" value="project.entity"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${db.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl.auto}</prop>
                <prop key="hibernate.connection.SetBigStringTryClob">true</prop>
                <prop key="hibernate.jdbc.batch_size">1</prop>
            </props>
        </property>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <import resource="security.xml"/>

    <!--populators-->

    <bean id="registrationFormPopulator" class="project.form.populator.RegistrationFormPopulator">
        <property name="bCryptPasswordEncoder" ref="encoder"/>
    </bean>

    <bean id="gameAdditionsFormPopulator" class="project.form.populator.GameAdditionsFormPopulator"/>

    <bean id="gameTypeFormPopulator" class="project.form.populator.GameTypeFormPopulator"/>

    <!--Events-->
    <bean id="sendVerificationPublisher" class="project.events.eventPublisher.SendVerificationPublisher"/>

    <bean id="sendVerificationListener" class="project.events.eventListener.SendVerificationListener"/>

    <!--MailSender-->
    <bean id="massageTemplate" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="tradersender@gmail.com"/>
    </bean>

    <bean id="customMailSenderImpl" class="project.service.implementation.CustomMailSenderImpl">
        <property name="simpleMailMessage" ref="massageTemplate"/>
        <property name="mailSender" ref="javaMailSender"/>
    </bean>

    <!--Massage template-->


    <bean id="registrationValidator" class="project.form.validator.RegistrationValidator">
        <property name="emailPattern" value="${pattern.email}"/>
        <property name="nickNamePattern" value="${pattern.nickname}"/>
    </bean>

</beans>